/*
 * This file is part of ng2-json-editor.
 * Copyright (C) 2017 CERN.
 *
 * ng2-json-editor is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of the
 * License, or (at your option) any later version.
 *
 * ng2-json-editor is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with ng2-json-editor; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 * In applying this license, CERN does not
 * waive the privileges and immunities granted to it by virtue of its status
 * as an Intergovernmental Organization or submit itself to any jurisdiction.
 */
import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class ProblemsService {
    constructor() {
        this.externalCategorizedProblems$ = new ReplaySubject(1);
        this.internalCategorizedProblems$ = new ReplaySubject(1);
        this.externalProblemCount$ = new ReplaySubject(1);
        this.internalProblemCount$ = new ReplaySubject(1);
        this.errorCount$ = this.getTotalDistinctProblemCount$ForType('errors');
        this.warningCount$ = this.getTotalDistinctProblemCount$ForType('warnings');
        this.internalProblemMap$ = new ReplaySubject(1);
        this.internalProblemMap = {};
        this.internalCategorizedProblemMap = { errors: {}, warnings: {} };
        this.externalCategorizedProblemMap = { errors: {}, warnings: {} };
        this.externalProblemCount = { errors: 0, warnings: 0 };
        this.internalProblemCount = { errors: 0, warnings: 0 };
        // set default counts to components
        this.externalProblemCount$.next(this.externalProblemCount);
        this.internalProblemCount$.next(this.internalProblemCount);
    }
    getTotalDistinctProblemCount$ForType(type) {
        const external$ = this.externalProblemCount$
            .pipe(map(counts => counts[type]));
        const internal$ = this.internalProblemCount$
            .pipe(map(counts => counts[type]));
        return combineLatest(external$, internal$, (external, internal) => external + internal)
            .pipe(distinctUntilChanged());
    }
    set externalProblems(problems) {
        const { categorizedProblemMap, errorCount, warningCount } = this.categorizeProblemMap(problems);
        this.externalProblemCount = { errors: errorCount, warnings: warningCount };
        this.externalProblemCount$.next(this.externalProblemCount);
        this.externalCategorizedProblemMap = categorizedProblemMap;
        this.externalCategorizedProblems$.next(this.externalCategorizedProblemMap);
    }
    setInternalProblemsForPath(path, problems) {
        this.internalProblemMap[path] = problems;
        this.internalProblemMap$.next(this.internalProblemMap);
        const categorizedProblems = this.categorizeValidationProblems(problems);
        this.internalProblemCount.errors += categorizedProblems.errors.length - this.internalProblemCountForPath(path, 'errors');
        this.internalProblemCount.warnings += categorizedProblems.warnings.length - this.internalProblemCountForPath(path, 'warnings');
        this.internalProblemCount$.next(this.internalProblemCount);
        this.internalCategorizedProblemMap.errors[path] = categorizedProblems.errors;
        this.internalCategorizedProblemMap.warnings[path] = categorizedProblems.warnings;
        this.internalCategorizedProblems$.next(this.internalCategorizedProblemMap);
    }
    internalProblemCountForPath(path, type) {
        if (this.internalCategorizedProblemMap[type][path]) {
            return this.internalCategorizedProblemMap[type][path].length;
        }
        return 0;
    }
    hasProblem(path) {
        const internalProblems = this.internalCategorizedProblemMap.errors[path];
        const externalProblems = this.externalCategorizedProblemMap.errors[path];
        const internalProblemCount = internalProblems ? internalProblems.length : 0;
        const externalProblemCount = externalProblems ? externalProblems.length : 0;
        return (internalProblemCount + externalProblemCount) > 0;
    }
    categorizeProblemMap(problemMap) {
        const categorizedProblemMap = { errors: {}, warnings: {} };
        let errorCount = 0;
        let warningCount = 0;
        Object.keys(problemMap)
            .map(path => {
            const validationProblems = problemMap[path];
            const categorized = this.categorizeValidationProblems(validationProblems);
            return { path, categorized };
        }).forEach(problemsForPath => {
            categorizedProblemMap.errors[problemsForPath.path] = problemsForPath.categorized.errors;
            categorizedProblemMap.warnings[problemsForPath.path] = problemsForPath.categorized.warnings;
            errorCount += problemsForPath.categorized.errors.length;
            warningCount += problemsForPath.categorized.warnings.length;
        });
        return { categorizedProblemMap, errorCount, warningCount };
    }
    categorizeValidationProblems(validationProblems) {
        const categorized = { errors: [], warnings: [] };
        validationProblems.forEach(error => {
            if (error.type === 'Error') {
                categorized.errors.push(error);
            }
            else {
                categorized.warnings.push(error);
            }
        });
        return categorized;
    }
}
ProblemsService.ɵfac = function ProblemsService_Factory(t) { return new (t || ProblemsService)(); };
ProblemsService.ɵprov = i0.ɵɵdefineInjectable({ token: ProblemsService, factory: ProblemsService.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(ProblemsService, [{
        type: Injectable
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,