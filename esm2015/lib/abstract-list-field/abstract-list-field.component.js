import { List } from 'immutable';
import { AbstractFieldComponent } from '../abstract-field';
/**
 * Abstract component to share code of common operations of all array fields
 *
 * Instance properties declared here only to resolve syntax errors.
 * Hence they need to be declared in children extending components (with decarators if necessary)
 */
export class AbstractListFieldComponent extends AbstractFieldComponent {
    constructor(appGlobalsService, problemsService, jsonStoreService, pathUtilService, changeDetectorRef) {
        super(appGlobalsService, problemsService, pathUtilService, changeDetectorRef, jsonStoreService);
        this.appGlobalsService = appGlobalsService;
        this.problemsService = problemsService;
        this.jsonStoreService = jsonStoreService;
        this.pathUtilService = pathUtilService;
        this.changeDetectorRef = changeDetectorRef;
    }
    /**
     * @param index - Index of the element that is moved
     * @param  direction - Movement direction. -1 for UP, +1 for DOWN
     */
    moveElement(index, direction) {
        this.jsonStoreService.moveIn(this.path, index, direction);
    }
    /**
     * @param index - Index of the element to be deleted
     */
    deleteElement(index) {
        const elementPath = this.path.concat(index);
        this.jsonStoreService.removeIn(elementPath);
        // empty list as notSetValue, because there can be lists rendered on the UI, while they are absent in json (alwaysShow)
        this.values = this.jsonStoreService.getIn(this.path, List());
    }
    getPathStringForChild(index) {
        return `${this.pathString}${this.pathUtilService.separator}${index}`;
    }
    hasPatchOrChildrenHavePatch() {
        return this.jsonStoreService.hasPatchOrChildrenHavePatch(this.pathString);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtbGlzdC1maWVsZC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL3Zhci93d3cvaHRtbC9BbnNodWwtSm9zaGkvQW5ndWxhci9HaXRIdWxmdEluYy9qc29uLWVkaXRvci9wcm9qZWN0cy9qc29uLWVkaXRvci9zcmMvIiwic291cmNlcyI6WyJsaWIvYWJzdHJhY3QtbGlzdC1maWVsZC9hYnN0cmFjdC1saXN0LWZpZWxkLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQkEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVqQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUkzRDs7Ozs7R0FLRztBQUNILE1BQU0sT0FBZ0IsMEJBQTJCLFNBQVEsc0JBQXNCO0lBTTdFLFlBQW1CLGlCQUFvQyxFQUM5QyxlQUFnQyxFQUNoQyxnQkFBa0MsRUFDbEMsZUFBZ0MsRUFDaEMsaUJBQW9DO1FBQzNDLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFML0Usc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUM5QyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNsQyxvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtJQUU3QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsV0FBVyxDQUFDLEtBQWEsRUFBRSxTQUFpQjtRQUMxQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7T0FFRztJQUNILGFBQWEsQ0FBQyxLQUFhO1FBQ3pCLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUMsdUhBQXVIO1FBQ3ZILElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELHFCQUFxQixDQUFDLEtBQWE7UUFDakMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLEdBQUcsS0FBSyxFQUFFLENBQUM7SUFDdkUsQ0FBQztJQUVELDJCQUEyQjtRQUN6QixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDNUUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIFRoaXMgZmlsZSBpcyBwYXJ0IG9mIG5nMi1qc29uLWVkaXRvci5cbiAqIENvcHlyaWdodCAoQykgMjAxNiBDRVJOLlxuICpcbiAqIG5nMi1qc29uLWVkaXRvciBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3JcbiAqIG1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzXG4gKiBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMiBvZiB0aGVcbiAqIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogbmcyLWpzb24tZWRpdG9yIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsIGJ1dFxuICogV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZSBHTlVcbiAqIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBuZzItanNvbi1lZGl0b3I7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgSW5jLixcbiAqIDU5IFRlbXBsZSBQbGFjZSwgU3VpdGUgMzMwLCBCb3N0b24sIE1BIDAyMTExLTEzMDcsIFVTQS5cbiAqIEluIGFwcGx5aW5nIHRoaXMgbGljZW5zZSwgQ0VSTiBkb2VzIG5vdFxuICogd2FpdmUgdGhlIHByaXZpbGVnZXMgYW5kIGltbXVuaXRpZXMgZ3JhbnRlZCB0byBpdCBieSB2aXJ0dWUgb2YgaXRzIHN0YXR1c1xuICogYXMgYW4gSW50ZXJnb3Zlcm5tZW50YWwgT3JnYW5pemF0aW9uIG9yIHN1Ym1pdCBpdHNlbGYgdG8gYW55IGp1cmlzZGljdGlvbi5cbiovXG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTGlzdCB9IGZyb20gJ2ltbXV0YWJsZSc7XG5cbmltcG9ydCB7IEFic3RyYWN0RmllbGRDb21wb25lbnQgfSBmcm9tICcuLi9hYnN0cmFjdC1maWVsZCc7XG5pbXBvcnQgeyBKc29uU3RvcmVTZXJ2aWNlLCBBcHBHbG9iYWxzU2VydmljZSwgUGF0aFV0aWxTZXJ2aWNlLCBQcm9ibGVtc1NlcnZpY2UgfSBmcm9tICcuLi9zaGFyZWQvc2VydmljZXMnO1xuaW1wb3J0IHsgSlNPTlNjaGVtYSB9IGZyb20gJy4uL3NoYXJlZC9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBBYnN0cmFjdCBjb21wb25lbnQgdG8gc2hhcmUgY29kZSBvZiBjb21tb24gb3BlcmF0aW9ucyBvZiBhbGwgYXJyYXkgZmllbGRzXG4gKlxuICogSW5zdGFuY2UgcHJvcGVydGllcyBkZWNsYXJlZCBoZXJlIG9ubHkgdG8gcmVzb2x2ZSBzeW50YXggZXJyb3JzLlxuICogSGVuY2UgdGhleSBuZWVkIHRvIGJlIGRlY2xhcmVkIGluIGNoaWxkcmVuIGV4dGVuZGluZyBjb21wb25lbnRzICh3aXRoIGRlY2FyYXRvcnMgaWYgbmVjZXNzYXJ5KVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RMaXN0RmllbGRDb21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdEZpZWxkQ29tcG9uZW50IHtcblxuICB2YWx1ZXM6IExpc3Q8YW55PjtcbiAgc2NoZW1hOiBKU09OU2NoZW1hO1xuICBwYXRoOiBBcnJheTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBhcHBHbG9iYWxzU2VydmljZTogQXBwR2xvYmFsc1NlcnZpY2UsXG4gICAgcHVibGljIHByb2JsZW1zU2VydmljZTogUHJvYmxlbXNTZXJ2aWNlLFxuICAgIHB1YmxpYyBqc29uU3RvcmVTZXJ2aWNlOiBKc29uU3RvcmVTZXJ2aWNlLFxuICAgIHB1YmxpYyBwYXRoVXRpbFNlcnZpY2U6IFBhdGhVdGlsU2VydmljZSxcbiAgICBwdWJsaWMgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmKSB7XG4gICAgc3VwZXIoYXBwR2xvYmFsc1NlcnZpY2UsIHByb2JsZW1zU2VydmljZSwgcGF0aFV0aWxTZXJ2aWNlLCBjaGFuZ2VEZXRlY3RvclJlZiwganNvblN0b3JlU2VydmljZSk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGluZGV4IC0gSW5kZXggb2YgdGhlIGVsZW1lbnQgdGhhdCBpcyBtb3ZlZFxuICAgKiBAcGFyYW0gIGRpcmVjdGlvbiAtIE1vdmVtZW50IGRpcmVjdGlvbi4gLTEgZm9yIFVQLCArMSBmb3IgRE9XTlxuICAgKi9cbiAgbW92ZUVsZW1lbnQoaW5kZXg6IG51bWJlciwgZGlyZWN0aW9uOiBudW1iZXIpIHtcbiAgICB0aGlzLmpzb25TdG9yZVNlcnZpY2UubW92ZUluKHRoaXMucGF0aCwgaW5kZXgsIGRpcmVjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGluZGV4IC0gSW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gYmUgZGVsZXRlZFxuICAgKi9cbiAgZGVsZXRlRWxlbWVudChpbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgZWxlbWVudFBhdGggPSB0aGlzLnBhdGguY29uY2F0KGluZGV4KTtcbiAgICB0aGlzLmpzb25TdG9yZVNlcnZpY2UucmVtb3ZlSW4oZWxlbWVudFBhdGgpO1xuICAgIC8vIGVtcHR5IGxpc3QgYXMgbm90U2V0VmFsdWUsIGJlY2F1c2UgdGhlcmUgY2FuIGJlIGxpc3RzIHJlbmRlcmVkIG9uIHRoZSBVSSwgd2hpbGUgdGhleSBhcmUgYWJzZW50IGluIGpzb24gKGFsd2F5c1Nob3cpXG4gICAgdGhpcy52YWx1ZXMgPSB0aGlzLmpzb25TdG9yZVNlcnZpY2UuZ2V0SW4odGhpcy5wYXRoLCBMaXN0KCkpO1xuICB9XG5cbiAgZ2V0UGF0aFN0cmluZ0ZvckNoaWxkKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnBhdGhTdHJpbmd9JHt0aGlzLnBhdGhVdGlsU2VydmljZS5zZXBhcmF0b3J9JHtpbmRleH1gO1xuICB9XG5cbiAgaGFzUGF0Y2hPckNoaWxkcmVuSGF2ZVBhdGNoKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmpzb25TdG9yZVNlcnZpY2UuaGFzUGF0Y2hPckNoaWxkcmVuSGF2ZVBhdGNoKHRoaXMucGF0aFN0cmluZyk7XG4gIH1cbn1cbiJdfQ==